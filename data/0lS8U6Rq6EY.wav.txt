 How one line of code cost a $60 million loss,
 60,000 people lost full phone service,
 half of AT&T's network goes down,
 and 500 airline flights were delayed.
 (whistles)
 On January 15th, 1990, ooh, this one's an oldie.
 AT&T's new joys the operation center
 detected a widespread system malfunction shown
 by a plethora of red warnings on their network display.
 Despite attempts to rectify the situation,
 the network remained compromised for nine hours,
 leading to 50% failure rate in call connections.
 AT&T lost over 60 million as a result,
 with over 60,000 of Americans left
 with fully disconnected phones.
 Furthermore, 500 flight, airline flights were delayed,
 affecting 85,000 people, damn, from one line of code,
 and it was started in New Jersey.
 New Jersey was the first people to recognize it,
 this seems great.
 This seems great.
 Well, 60 million, of course, that's low,
 but you have to remember, this was the '90s, okay?
 Like the amount of airplane flights is not the same
 as it is today.
 The amount of people, like say using cellular devices,
 not as much, okay?
 So imagine if they just completely borked the network
 in everything for nine hours due to one line of code today.
 It would be billions of dollars, okay?
 So put it into perspective, understand it.
 AT&T's long-distance network was supposedly
 a paragon of efficiency, handling a substantial portion
 of the nation's calls with its advanced electronic switches
 and signaling system.
 This system usually completed call routing
 within seconds, lightning fast, blazingly fast.
 However, on this day, a fault originated
 in the New York switch cascading through the network.
 This was due to a software bug in the recent update
 that contained a critical bug affecting the network's
 114 switches.
 When the New York switch reset itself and sent out signals,
 this bug caused a domino effect leading to widespread network
 disruption.
 Okay, what is it?
 What is it?
 Interestingly, this small software patch was not tested.
 Damn, they tested in production.
 Dude, AT&T tested in production in the '90s.
 Man, the '90s were crazy, okay?
 The '90s were wild.
 Testing was actually bypassed as per management request
 because the code change was small.
 Gotta love management.
 Management knows best people.
 Management has always known best, okay?
 So next time you're in a meeting and some managers
 like, hey, guess what, we don't need to do X, Y, and Z.
 Like, let's just pretend you're gonna have a submarine
 that you wanna take to the bottom of the ocean
 and you wanna bypass a couple safety features.
 Well, guess what, management is always right.
 Don't forget it.
 The root cause was traced back to the coding air
 and software update implemented across the network switches.
 The air within a C program involved a misplaced break statement.
 Oh, yes.
 Oh, just the worst feature of them all,
 which is switch and now you're telling me
 it's a break statement to cause $60 million dollars.
 Oh, my.
 That is beautiful.
 With an invested conditional statements leading
 to data over rights and system resets, the pseudo code.
 While ring receiving buffer, not empty,
 and side buffer, not empty, initialize pointer to the first message
 and side buffer, you know, I TNT with them side buffers
 or ring receive buffer, get copy of buffer,
 switch message if incoming, if sending switch is out of service,
 if ring right buffer is empty, send service
 or send in service to status map, else break.
 This was the error and if.
 There was no else, there's no else statement here.
 There's never been an L statement and they made one on accident
 by accident for accident.
 Damn, here's the.
 Yeah, there you go, process incoming message set
 a pointer to optional parameters break.
 Yeah, yeah, you done messed up blocky.
 You can tell right away that this was, this is not it.
 Dude, no brackets either.
 I know in this pseudo code disgusting.
 The problem, the ring buffer, let's see,
 the ring right buffer is not empty
 and the if statement online seven skipped, let's see,
 is skipped and the break statement online 10 is hit.
 However, for the program to function properly,
 line 11 should have been hit and said yes,
 this process business right here.
 That's what they're talking about.
 When the break statement is hit instead of the incoming
 message being processed and the pointer being set up
 to to optional parameters, then data,
 the pointers that should have been held is overwritten.
 The error correction software to identify the data
 overwrite and initiated a shutdown of the switches
 for a reset. Oh, my, oh, my, this issue was compounded
 because this flawed software was present in all switches
 across the network leading to a chain of reaction
 to of resets that ultimately crippled
 the entire network system.
 Oh boy, every time this was hit,
 it would just chain reaction shut down.
 Oh, despite rigorous testing, wait, what?
 - I'm broke, you know, if this was one of those
 really highly edited reaction videos right now,
 it would play me being like, you know,
 you know, test nothing says management.
 And then all of a sudden despite rigorous testing
 and network design for resilience,
 one line of code was able to bring down
 half the country's main line of communication.
 The fix, it took nine or took engineers nine hours
 to get AT&T system back or fully back online.
 They did so most, let's see,
 they did so mostly by rolling back the switches
 to a previous working version of code.
 It actually took software engineers two weeks
 of rigorous code reading, testing and replication
 to actually understand where the bug was.
 Little lesson here, two hours of software engineering time
 is totally worth the trade off of $60 million.
 Okay, that's what I, that's what I'm reading right now.
 That's what I'm reading, get blame, I know you get bisect.
 I know, so that's what I'm, okay, so right away,
 those are my first thoughts is where the hell's get bisect.
 When was get invented, created,
 create, discovered in 2005.
 This is 1990, there's no get, okay?
 All right, no get, you can't even get good.
 Okay, you can't, literally, you cannot get,
 you have to use tortoise SVN.
 When was tortoise SVN created?
 Everybody's favorite, SVN created.
 When was SVN created?
 This subversion also called SVN was created 2000.
 Okay, so still a decade, we're still a decade off.
 At this point, there's no walking back commits, okay?
 We all got, we, we're all weak programmers using SVNs
 and, and gets and all that, okay?
 Maybe you forgot how awful those back,
 those days were back in the day.
 Conclusion, for AT&T unfortunately, this was,
 this wasn't even their biggest system crash of the 90s.
 They encountered many more issues later in the decade.
 I mean, they also were, I mean, think about what AT&T was doing.
 I mean, they helped, you know,
 part of the creation of this giant network, you know what I mean?
 So it's like, that's real, you know what I mean?
 We got to give them a little bit of credit.
 Imagine doing nothing and then doing something
 that has never been done before.
 That requires thousands of people to be in order,
 creating the largest software project
 potentially ever, wild, absolutely wild.
 Today's companies have an even better process in place
 and even then, bug slip through Google wrote a great retrospective
 on 20 years of site reliability engineering,
 where they, oh, I might, I'm, I'm gonna look at that thing
 at some point, where they reflected on YouTube's first,
 or first global outage in 2016.
 The scale of outage for companies is huge
 and there's lessons to be learned from each outage for most.
 However, outages come down to human error and gaps in process.
 Do you understand that spicy wiener?
 You get that?
 You got a firm grasp on it spicy wiener?
 Telefony in the US has always been bad compared to Europe.
 I'm gonna say something that may be factually incorrect,
 but my American mind can only comprehend it in one way,
 which is the following thing I'm about to say out of my mouth hole,
 which is, we made it first.
 So we got the worst version.
 European mind can't, European mind can't comprehend being first, okay?
 This just did, hot off the presses.
 European mind can't comprehend big first.
 Got 'em, these nuts, lay it down, so good.
 Oh man, rage detected.
 I'd rather have V2.
 Yeah, think about the brain implant coming.
 I'm definitely not going for V1, V2, V3, V4.
 I don't want any of them, okay?
 Until someone's like, you, you will get one.
 I ain't get one, okay?
 Sounds terrifying.
 The name.
 American number one, come on, let's go,
 private jet, let's go, yeah, get it.
